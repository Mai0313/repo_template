name: Build

on:
  push:
    tags:
      - v*

permissions: write-all

jobs:
  build_package:
    name: Build Package
    runs-on: ubuntu-latest
    # container: catthehacker/ubuntu:act-20.04  # Uncomment it if you use it on Gitea

    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      # - name: Setup MTK Certification
      #   uses: https://gitea.mediatek.inc/actions/mtk-cert-action@v1.2.0

      # - name: Setup SSH Key
      #   uses: shimataro/ssh-key-action@v2.7.0
      #   with:
      #     key: ${{ secrets.SSH_KEY }}
      #     name: id_rsa
      #     known_hosts: unnecessary
      #     config: |
      #       Host *
      #         StrictHostKeyChecking no
      #         UserKnownHostsFile=/dev/null
      #     if_key_exists: replace

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Version
        shell: bash
        run: |
          VERSION=$(uvx dunamai from git --bump --no-metadata --style pep440)
          uv version $VERSION
          echo "Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Package
        run: |
          uv build

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        env:
          OUTPUT: CHANGELOG.md
        with:
          config: pyproject.toml
          args: --unreleased --tag ${{ env.VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          path: ./dist/*
          name: ${{ github.event.repository.name }}-py${{ matrix.python-version }}
          if-no-files-found: ignore
          retention-days: 7
          compression-level: 6
          overwrite: true

      - name: Upload Release Assets
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./dist/*

  build_images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    # container: catthehacker/ubuntu:act-22.04  # Uncomment it if you use it on Gitea

    strategy:
      matrix:
        target:
          - name: Build and Push Images (Latest / Release)
            target_step: prod
            tag: ghcr.io/mai0313/${{ github.event.repository.name }}

    env:
      BUILDKIT_NO_CLIENT_TOKEN: 1 # docker buildkit env
      # gitea action download node.js skip certificate !https
      NODE_TLS_REJECT_UNAUTHORIZED: 0

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      # - name: Setup MTK Certification
      #   uses: https://gitea.mediatek.inc/actions/mtk-cert-action@v1.2.0

      # - name: Setup SSH Key
      #   uses: shimataro/ssh-key-action@v2.7.0
      #   with:
      #     key: ${{ secrets.SSH_KEY }}
      #     name: id_rsa
      #     known_hosts: unnecessary
      #     config: |
      #       Host *
      #         StrictHostKeyChecking no
      #         UserKnownHostsFile=/dev/null
      #     if_key_exists: replace

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Version
        shell: bash
        run: |
          VERSION=$(uvx dunamai from git --bump --no-metadata --style pep440)
          uv version $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "GITHUB_SHA=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Login to the Container registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup docker context for buildx
        run: |
          docker context create builders || docker context use builders

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3
        # with:
        #   endpoint: builders
        #   config-inline: |
        #     debug = true
        #     insecure-entitlements = [ "network.host", "security.insecure" ]
        #     [registry."oa-mirror.mediatek.inc:5000"]
        #       http = true
        #       insecure = true
        #     [registry."mtkomcr.mediatek.inc"]
        #       http = false
        #       insecure = true
        #     [registry."mtksms10.mediatek.inc:5000"]
        #       http = true
        #       insecure = true
        #     [registry."gitea.mediatek.inc"]
        #       http = false
        #       insecure = true
        #     [worker.oci]
        #       [worker.oci.environmentfile]
        #         GIT_SSL_NO_VERIFY = "true"

      - name: ${{ matrix.target.name }}
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./docker/Dockerfile
          target: ${{ matrix.target.target_step }}
          build-args: ${{ matrix.target.build_args }}
          labels: ${{ env.VERSION }}
          tags: |
            ${{ matrix.target.tag }}:latest
            ${{ matrix.target.tag }}:${{ env.VERSION }}
          sbom: false
          provenance: false
          cache-from: type=registry,ref=${{ matrix.target.tag }}:buildcache
          cache-to: type=registry,ref=${{ matrix.target.tag }}:buildcache,image-manifest=true,oci-mediatypes=true,mode=max

  build_executable:
    name: Build Executable File
    runs-on: windows-latest

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      # - name: Setup MTK Certification
      #   uses: https://gitea.mediatek.inc/actions/mtk-cert-action@v1.2.0

      # - name: Setup SSH Key
      #   uses: shimataro/ssh-key-action@v2.7.0
      #   with:
      #     key: ${{ secrets.SSH_KEY }}
      #     name: id_rsa
      #     known_hosts: unnecessary
      #     config: |
      #       Host *
      #         StrictHostKeyChecking no
      #         UserKnownHostsFile=/dev/null
      #     if_key_exists: replace

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the version
        shell: pwsh
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $env:PYTHONUTF8 = "1"
          $VERSION = (uvx dunamai from git --bump --no-metadata --style pep440)
          uv version $VERSION
          echo "Version: $VERSION"
          echo "VERSION=$VERSION" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      # - name: Setup uv
      #   uses: astral-sh/setup-uv@v6
      #   with:
      #     version: "latest"
      #     python-version: "3.10"
      #     pyproject-file: "pyproject.toml"
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Install dependencies
      #   run: |
      #     uv sync

      # - name: Packaging to Executable file
      #   run: |
      #     uv pip install pyinstaller
      #     pyinstaller -F main.py --onefile -n ${{ github.event.repository.name }}

      - name: Move and Rename
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "./dist" -ErrorAction SilentlyContinue
          Copy-Item -Path "./dist/*" -Destination "./" -Recurse -Force
          Remove-Item -Recurse -Force build, dist, .venv, .cache, .git -ErrorAction SilentlyContinue

      - name: Upload Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          path: ./*
          name: ${{ github.event.repository.name }}_${{ env.VERSION }}
          if-no-files-found: ignore
          retention-days: 7
          compression-level: 6
          overwrite: true

      - name: List files
        shell: pwsh
        run: |
          Get-ChildItem -Path .

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}_${{ env.VERSION }}
          path: ${{ github.event.repository.name }}_${{ env.VERSION }}

      - name: Check Files
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ github.event.repository.name }}_${{ env.VERSION }}" -DestinationPath "${{ github.event.repository.name }}_${{ env.VERSION }}.zip" -Force
          ls -Force

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ github.event.repository.name }}_${{ env.VERSION }}.zip
